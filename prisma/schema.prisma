// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  Admin
  User
}

model User {
  id         Int      @id @default(autoincrement())
  uuid       String   @default(uuid())
  email      String   @unique
  name       String?
  password   String
  role       Role     @default(User)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Product  Product[]
  Order    Order[]
  Rating   Rating[]
  Cart     Cart[]
  Category Category[]

  @@map("users")
}

model Category {
  id          Int      @id @default(autoincrement())
  uuid        String   @default(uuid())
  name        String   @unique
  description String?
  user_id     Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id])

  products Product[]

  @@map("categories")
}

model Product {
  id                     Int      @id @default(autoincrement())
  uuid                   String   @default(uuid())
  name                   String
  description            String?
  min_stock_quantity     Int      @default(0)
  max_stock_quantity     Int      @default(0)
  current_stock_quantity Int      @default(0)
  category_id            Int
  user_id                Int
  created_at             DateTime @default(now())
  updated_at             DateTime @updatedAt

  category Category @relation(fields: [category_id], references: [id])
  user     User     @relation(fields: [user_id], references: [id])

  Price     Price[]
  Discount  Discount[]
  OrderItem OrderItem[]
  Rating    Rating[]
  CartItem  CartItem[]

  @@map("products")
}

model Price {
  id         Int       @id @default(autoincrement())
  uuid       String    @default(uuid())
  price      Float
  currency   String    @default("USD")
  valid_from DateTime
  valid_to   DateTime?
  product_id Int
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  product Product @relation(fields: [product_id], references: [id])

  @@map("prices")
}

model Discount {
  id                  Int       @id @default(autoincrement())
  uuid                String    @default(uuid())
  discount_percentage Float
  valid_from          DateTime
  valid_to            DateTime?
  product_id          Int
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt

  product Product @relation(fields: [product_id], references: [id])

  @@map("discounts")
}

model Order {
  id          Int      @id @default(autoincrement())
  uuid        String   @default(uuid())
  user_id     Int
  total_price Float    @default(0)
  status      String   @default("pending")
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id])

  OrderItem OrderItem[]

  @@map("orders")
}

model OrderItem {
  id             Int      @id @default(autoincrement())
  uuid           String   @default(uuid())
  order_id       Int
  product_id     Int
  quantity       Int
  price_at_order Float
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  order          Order    @relation(fields: [order_id], references: [id])
  product        Product  @relation(fields: [product_id], references: [id])

  @@map("order_items")
}

model Rating {
  id         Int      @id @default(autoincrement())
  uuid       String   @default(uuid())
  user_id    Int
  product_id Int
  rating     Int
  review     String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user    User    @relation(fields: [user_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])

  @@map("ratings")
}

model Cart {
  id         Int      @id @default(autoincrement())
  uuid       String   @default(uuid())
  user_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user      User       @relation(fields: [user_id], references: [id])
  cartItems CartItem[]

  @@map("carts")
}

model CartItem {
  id         Int      @id @default(autoincrement())
  uuid       String   @default(uuid())
  cart_id    Int
  product_id Int
  quantity   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  cart    Cart    @relation(fields: [cart_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])

  @@map("cart_items")
}
